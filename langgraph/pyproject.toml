[project]
name = "langgraph-test"
version = "0.1.0"
description = ""
requires-python = ">=3.11,<4.0"
dependencies = [
    "langchain-core ~=0.3.33",
    "langchain-community ~=0.3.16",
    "langchain-openai ~=0.3.0",
    "langchain-tavily>=0.1",
    "langgraph ~=0.5.0",
    "pandas ~=2.2.3",
    "python-dotenv ~=1.0.1",
    "pymysql",
    "numexpr>=2.11.0",
    "json-schema-to-pydantic>=0.4.1",
    "openapi2tools>=0.3",
    "fastapi>=0.116.1",
    "openapi3-parser>=1.1.21",
]

[dependency-groups]
dev = [
    "langgraph-cli[inmem]>=0.1.71",
    "pytest>=8.3.5",
    "ruff>=0.6.1",
    "mypy>=1.11.1",
    "ipykernel",
]

[tool.ruff]
line-length = 100
target-version = "py311"
exclude = ["alembic"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "UP006",
    "UP007",
    # We actually do want to import from typing_extensions
    "UP035",
    # Relax the convention by _not_ requiring documentation for every function parameter.
    "D417",
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]
[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "UP"]
[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.pytest.ini_options]
pythonpath = ["src"]
asyncio_default_fixture_loop_scope = "function"

[tool.pytest_env]
OPENAI_API_KEY = "sk-fake-openai-key"

[tool.mypy]
strict = true
plugins = "pydantic.mypy"
exclude = ["venv", ".venv", "alembic"]

[[tool.mypy.overrides]]
module = ["numexpr.*"]
follow_untyped_imports = true
